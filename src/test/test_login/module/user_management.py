"""
Title: User Management
Date: 25/6/2021
Author: Chu Zhen Hao
Organisation: Malaysian Smart Factory 4.0 Team at Selangor Human Resource Development Centre (SHRDC)
"""

import sys
from pathlib import Path
SRC = Path(__file__).resolve().parents[2]  # ROOT folder -> ./src
LIB = sys.path.insert(0, str(Path(SRC, 'lib')))  # ./lib
# print(LIB)

import logging
import psycopg2
from passlib.hash import argon2


#--------------------Logger-------------------------#

FORMAT = '[%(levelname)s] %(asctime)s - %(message)s'
DATEFMT = '%d-%b-%y %H:%M:%S'

# logging.basicConfig(filename='test.log',filemode='w',format=FORMAT, level=logging.DEBUG)
logging.basicConfig(format=FORMAT, level=logging.INFO,
                    stream=sys.stdout, datefmt=DATEFMT)

log = logging.getLogger()

#----------------------------------------------------#

# ------------------TEMP
import streamlit as st
from streamlit import cli as stcli  # Add CLI so can run Python script directly
# DEFINE Web APP page configuration
# try:
#     st.set_page_config(page_title="Integrated Vision Inspection System",
#                        page_icon="static/media/shrdc_image/shrdc_logo.png", layout='wide')
# except:
#     st.beta_set_page_config(page_title="Label Studio Test",
#                             page_icon="random", layout='wide')
# ------------------TEMP

conn = psycopg2.connect(
    "host=localhost port=5432 dbname=eye user=shrdc password=shrdc")

# User Status
NEW = 0  # Pending account activation
ACTIVE = 1  # Account activated
LOCKED = 2  # Account locked
LOGGED_IN = 3  # Account logged-in
LOGGED_OUT = 4  # Account logged-out


def check_if_field_empty(new_user, field_placeholder, field_name):
    empty_fields = []
    # all_field_filled = all(new_user)
    # if not all_field_filled:  # IF there are blank fields, iterate and produce error message
    for key, value in new_user.items():
        if value == "":
            field_placeholder[key].error(
                f"Please do not leave {field_name[key]} field blank")
            empty_fields.append(key)

        else:
            pass

    return not empty_fields


def create_usertable(conn=conn):  # Create Table
    # create relation : user_details
    create_username_table = """CREATE TABLE IF NOT EXISTS user_details (
                                user_id INT GENERATED BY DEFAULT AS IDENTITY, 
                                emp_id TEXT,
                                username TEXT NOT NULL, 
                                first_name TEXT,
                                last_name TEXT,
                                email TEXT, 
                                department TEXT,
                                position TEXT,                               
                                psd TEXT NOT NULL, 
                                role VARCHAR (30),
                                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                                last_activity TIMESTAMP WITH TIME ZONE,
                                status varchar(15) DEFAULT 'NEW' ,
                                PRIMARY KEY (user_id,role)
                                            );"""
    with conn:
        with conn.cursor() as cur:
            cur.execute(create_username_table)
            conn.commit()

# Create User


def create_user(user, conn=conn):
    # def create_user(new_user):
    # new_user = {}

    create_usertable(conn)  # create user table if does not exist
    # Employee Corporate Details
    log.info("User Entry")
    # new_user["emp_id"] = input("Employee ID: ")
    # new_user["first_name"] = input("First Name: ")
    # new_user["last_name"] = input("Last Name: ")
    # new_user["email"] = input("Employee Email: ")
    # new_user["department"] = input("Department: ")
    # new_user["position"] = input("Position: ")

    # # Account Corporate Details
    # new_user["username"] = input("Username: ")
    # new_user["role"] = input("Role: ")
    psd = argon2.hash(user["psd"])
    log.info(f'password: {user["psd"]}')

    with conn:
        with conn.cursor() as cur:
            cur.execute(""" INSERT INTO user_details (emp_id,first_name,last_name,email,department,position,username,role, psd) 
                            VALUES (%s,%s, %s,%s,%s,%s,%s,%s,%s)
                            RETURNING user_id,username,created_at as create_user;""",
                        [user["emp_id"], user["first_name"], user["last_name"], user["email"], user["department"], user["position"],
                         user["username"], user["role"], psd])
            # cur.execute("select * from Login;")

            conn.commit()
            user_create = cur.fetchone()
            log.info(user_create)
            user = {}


# User Login

def user_login(user, conn=conn):
    # def user_login(user):
    user_entry_flag = LOGGED_OUT
    # --Testing
    # user = {}
    # user["username"] = input("Username: ")
    # user["psd"] = input("Password: ")
    log.info(f'Login password: {user["psd"]}')
    # -----Testing

    with conn:
        with conn.cursor() as cur:
            cur.execute("SELECT psd FROM user_details where username=%s;",
                        [user["username"]])

            conn.commit()
            user_exist = cur.fetchone()
            log.info(user_exist[0])

    if user_exist is not None:
        psd = user_exist[0]
        log.info(f"Retrieved password: {psd}")
        log.info(argon2.verify(user["psd"], psd))

    return user_exist, user_entry_flag


def update_psd(user, conn=conn):
    psd = argon2.hash(user["psd"])
    with conn:
        with conn.cursor() as cur:
            cur.execute("""UPDATE user_details 
                        SET psd = %s,
                            status = %s
                        WHERE username = %s
                        RETURNING psd;""",
                        [psd, user["status"],user["username"]])

            conn.commit()
            user_exist = cur.fetchone()
            log.info(user_exist[0])


# user_create = create_user()  # Create New User

# user_exist, user_entry_flag = user_login()  # Create New User


# conn.close()
