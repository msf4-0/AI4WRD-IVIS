-- USERS table ------------------------------------------------
CREATE TABLE IF NOT EXISTS public.users
(
    id            BIGINT                   NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    emp_id        TEXT UNIQUE,
    username      TEXT                     NOT NULL UNIQUE,
    first_name    TEXT,
    last_name     TEXT,
    email         TEXT,
    department    TEXT,
    position      TEXT,
    psd           TEXT                     NOT NULL,
    roles_id      INTEGER                  NOT NULL,
    status_id     INTEGER                  NOT NULL DEFAULT 1,
    created_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_activity TIMESTAMP WITH TIME ZONE,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER users_update
    BEFORE UPDATE
    ON public.users
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.users
    OWNER TO shrdc;

-- CHECK (account_status IN ('NEW', 'ACTIVE', 'LOCKED', 'LOGGED_IN', 'LOGGED_OUT'))
--  ROLES table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.roles
(
    id               BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name             CHARACTER VARYING(50)    NOT NULL,
    page_access_list TEXT[],
    created_at       TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

ALTER TABLE public.roles
    OWNER TO shrdc;

CREATE TRIGGER roles_update
    BEFORE UPDATE
    ON public.roles
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

-- INSERT pre-defined values into ROLES
INSERT INTO public.roles (name,
                          page_access_list)
VALUES ('Administrator',
        ARRAY ['Login', 'Project', 'Dataset', 'Editor', 'Model Training', 'Deployment', 'User Management']),
       ('Developer 1 (Deployment)',
        ARRAY ['Login', 'Project', 'Dataset', 'Editor', 'Model Training', 'Deployment']),
       ('Developer 2 (Model Training)',
        ARRAY ['Login', 'Project', 'Dataset', 'Editor', 'Model Training']),
       ('Annotator',
        ARRAY ['Login', 'Project', 'Dataset', 'Editor']);

--  SESSION_LOG table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.session_log
(
    id        BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (CYCLE INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    users_id  BIGINT                   NOT NULL,
    login_at  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    logout_at TIMESTAMP WITH TIME ZONE NOT NULL,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

ALTER TABLE public.session_log
    OWNER TO shrdc;

--  PROJECT table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.project
(
    id            BIGINT                   NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name          TEXT                     NOT NULL UNIQUE,
    description   TEXT,
    deployment_id INTEGER,
    created_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER project_update
    BEFORE UPDATE
    ON public.project
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.project
    OWNER TO shrdc;

--  TRAINING table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.training
(
    id                BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name              TEXT                     NOT NULL UNIQUE,
    description       TEXT,
    training_model_id BIGINT,
    /* FK to 'model' table for model trained using current configuration */
    attached_model_id BIGINT,
    /* FK to 'models' table for models attached to current training */
    training_param    JSONB,
    augmentation      JSONB,
    partition_size    REAL,
    is_started        BOOLEAN                  NOT NULL DEFAULT FALSE,
    progress          JSONB, /* stores progress tracking of model training such as checkpoint and previous training steps*/
    created_at        TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at        TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    project_id        BIGINT                   NOT NULL,

    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;
CREATE TRIGGER training_update
    BEFORE
        UPDATE
    ON public.training
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.training
    OWNER TO shrdc;

-- TRAINING_LOG table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.training_log
(
    id          BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (CYCLE INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    users_id    BIGINT                   NOT NULL,
    training_id BIGINT                   NOT NULL,
    start_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    --update using Python
    end_at      TIMESTAMP WITH TIME ZONE NOT NULL,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

ALTER TABLE public.training_log
    OWNER TO shrdc;

-- MODEL_TYPE table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.model_type
(
    id   SMALLINT              NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 32767
        CACHE 1),
    name CHARACTER VARYING(50) NOT NULL,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

ALTER TABLE public.model_type
    OWNER TO shrdc;

INSERT INTO public.model_type (name)
VALUES ('Pre-trained Models'),
       ('Project Models'),
       ('User Custom Deep Learning Model Upload');


/* -- PRE-TRAINED MODELS table --------------------------------------------------
 CREATE TABLE IF NOT EXISTS public.pre_trained_models (
 id bigint NOT NULL GENERATED ALWAYS AS IDENTITY (CYCLE INCREMENT 1 START 1
 MINVALUE 1
 MAXVALUE 9223372036854775807
 CACHE 1),
 name text NOT NULL,
 model_path text,
 framework_id bigint,
 deployment_id integer,
 created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
 updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (id))
 TABLESPACE image_labelling;
 
 CREATE TRIGGER pre_trained_models_update
 BEFORE UPDATE ON public.pre_trained_models
 FOR EACH ROW
 EXECUTE PROCEDURE trigger_update_timestamp ();
 
 ALTER TABLE public.pre_trained_models OWNER TO shrdc;
 
 INSERT INTO public.pre_trained_models (
 name,
 framework_id,
 model_path,
 deployment_id)
 VALUES (
 '[TF] SSD MobileNet V2 FPNLite 320x320',
 (
 SELECT
 f.id
 FROM
 public.framework f
 WHERE
 f.name = 'TensorFlow'), './tensorflow/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8', 2), ('[TF] SSD ResNet50 V1 FPN 640x640 (RetinaNet50)', (
 SELECT
 f.id
 FROM
 public.framework f
 WHERE
 f.name = 'TensorFlow'), './tensorflow/ssd_resnet50_v1_fpn_640x640_coco17_tpu-8', 2);
 */
/* -- USER_UPLOAD_MODELS table --------------------------------------------------
 CREATE TABLE IF NOT EXISTS public.user_upload_models (
 id bigint NOT NULL GENERATED ALWAYS AS IDENTITY (CYCLE INCREMENT 1 START 1
 MINVALUE 1
 MAXVALUE 9223372036854775807
 CACHE 1),
 name text NOT NULL,
 model_path text,
 framework_id bigint,
 deployment_id integer,
 created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
 updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY (id))
 TABLESPACE image_labelling;
 
 CREATE TRIGGER pre_trained_models_update
 BEFORE UPDATE ON public.user_upload_models
 FOR EACH ROW
 EXECUTE PROCEDURE trigger_update_timestamp ();
 
 ALTER TABLE public.user_upload_models OWNER TO shrdc; 
 */
-- MODELS table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.models
(
    id            BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name          TEXT                     NOT NULL UNIQUE,
    description   TEXT,
    metrics       JSONB,
    /*to store evaluation metrics for model such as COCO mAP and Training Losses*/
    model_path    TEXT,
    model_type_id SMALLINT,
    framework_id  BIGINT,
    deployment_id INTEGER,
    training_id   BIGINT,
    created_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER models_update
    BEFORE UPDATE
    ON public.models
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.models
    OWNER TO shrdc;

-- PREDICTIONS table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.predictions
(
    id                   BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    result               JSONB[],
    task_id              BIGINT                   NOT NULL,
    model_id             BIGINT,
    pre_trained_model_id BIGINT,
    score                DOUBLE PRECISION,
    created_at           TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at           TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER predictions_update
    BEFORE UPDATE
    ON public.predictions
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.predictions
    OWNER TO shrdc;

-- DATASET table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.dataset
(
    id           BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name         TEXT                     NOT NULL UNIQUE,
    description  TEXT,
    dataset_path TEXT                     NOT NULL,
    dataset_size INTEGER,
    filetype_id  INTEGER,
    created_at   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER dataset_update
    BEFORE UPDATE
    ON public.dataset
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.dataset
    OWNER TO shrdc;

--  DEPLOYMENT_TYPE table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.deployment_type
(
    id       BIGINT                 NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name     CHARACTER VARYING(100) NOT NULL,
    template TEXT,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

ALTER TABLE public.deployment_type
    OWNER TO shrdc;

INSERT INTO public.deployment_type (name)
VALUES ('Image Classification'),
       ('Object Detection with Bounding Boxes'),
       ('Semantic Segmentation with Polygons'),
       ('Semantic Segmentation with Masks');

--  TASK table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.task
(
    id            BIGINT                   NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name          TEXT                     NOT NULL,
    dataset_id    BIGINT                   NOT NULL,
    project_id    BIGINT,
    annotation_id BIGINT,
    prediction_id BIGINT,
    is_labelled   BOOLEAN                  NOT NULL DEFAULT FALSE,
    skipped       BOOLEAN                  NOT NULL DEFAULT FALSE,
    created_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER task_update
    BEFORE UPDATE
    ON public.task
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.task
    OWNER TO shrdc;

-- ANNOTATIONS table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.annotations
(
    id                 BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    result             JSONB[],
    annotation_type_id INTEGER,
    project_id         BIGINT                   NOT NULL,
    users_id           BIGINT                   NOT NULL,
    task_id            BIGINT                   NOT NULL,
    created_at         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER annotations_update
    BEFORE UPDATE
    ON public.annotations
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.annotations
    OWNER TO shrdc;


/* NOTE */
-- ANNOTATION_TYPE table --------------------------------------------------
-- CREATE TABLE IF NOT EXISTS public.annotation_type (
--     id bigint NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
--     MINVALUE 1
--     MAXVALUE 9223372036854775807
--     CACHE 1),
--     name character varying(100) NOT NULL,
--     PRIMARY KEY (id))
-- TABLESPACE image_labelling;
-- ALTER TABLE public.annotation_type OWNER TO shrdc;
-- PROJECT_DATASET table (Many-to-Many) --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.project_dataset
(
    project_id BIGINT                   NOT NULL,
    dataset_id BIGINT                   NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (project_id, dataset_id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER project_dataset_update
    BEFORE UPDATE
    ON public.project_dataset
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.project_dataset
    OWNER TO shrdc;

-- EDITOR table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.editor
(
    id            BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name          CHARACTER VARYING(50)    NOT NULL,
    editor_config TEXT,
    labels        JSONB[],
    project_id    BIGINT                   NOT NULL,
    created_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER editor_update
    BEFORE UPDATE
    ON public.editor
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.editor
    OWNER TO shrdc;

-- FRAMEWORK table --------------------------------------------------
CREATE TABLE IF NOT EXISTS public.framework
(
    id         BIGINT                   NOT NULL GENERATED ALWAYS AS IDENTITY (INCREMENT 1 START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1),
    name       CHARACTER VARYING(50)    NOT NULL,
    link       TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER framework_update
    BEFORE UPDATE
    ON public.framework
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.framework
    OWNER TO shrdc;

INSERT INTO public.framework (name,
                              link)
VALUES ('TensorFlow',
        'https://www.tensorflow.org/'),
       ('PyTorch',
        'https://pytorch.org/'),
       ('Scikit-learn',
        'https://scikit-learn.org/stable/'),
       ('Caffe',
        'https://caffe.berkeleyvision.org/'),
       ('MXNet',
        'https://mxnet.apache.org/'),
       ('ONNX',
        'https://onnx.ai/');

-- PROJECT_TRAINING table (Many-to-Many) ---------------------------
CREATE TABLE IF NOT EXISTS public.project_training
(
    project_id  BIGINT                   NOT NULL,
    training_id BIGINT                   NOT NULL,
    created_at  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (project_id, training_id)
)
    TABLESPACE image_labelling;

CREATE TRIGGER project_training_update
    BEFORE UPDATE
    ON public.project_training
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.project_training
    OWNER TO shrdc;

-- TRAINING_DATASET table (Many-to-Many) ---------------------------
CREATE TABLE IF NOT EXISTS public.training_dataset
(
    training_id BIGINT                   NOT NULL,
    dataset_id  BIGINT                   NOT NULL,
    created_at  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (training_id, dataset_id)
) TABLESPACE image_labelling;

CREATE TRIGGER training_dataset_update
    BEFORE UPDATE
    ON public.training_dataset
    FOR EACH ROW
EXECUTE PROCEDURE trigger_update_timestamp();

ALTER TABLE public.training_dataset
    OWNER TO shrdc;

-- ACCOUNT_STATUS table ---------------------------
CREATE TABLE IF NOT EXISTS public.account_status
(
    id   INTEGER                      NOT NULL GENERATED ALWAYS AS IDENTITY,
    name CHARACTER VARYING(50) UNIQUE NOT NULL,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

ALTER TABLE public.account_status
    OWNER TO shrdc;

INSERT INTO public.account_status (name)
VALUES ('NEW'),
       ('ACTIVE'),
       ('LOCKED'),
       ('LOGGED_IN'),
       ('LOGGED_OUT');

ALTER TABLE public.users
    RENAME COLUMN account_status TO status_id;

-- FILETYPE table ---------------------------
CREATE TABLE IF NOT EXISTS public.filetype
(
    id   INTEGER                      NOT NULL GENERATED ALWAYS AS IDENTITY,
    name CHARACTER VARYING(50) UNIQUE NOT NULL,
    PRIMARY KEY (id)
)
    TABLESPACE image_labelling;

ALTER TABLE public.filetype
    OWNER TO shrdc;

INSERT INTO public.filetype (name)
VALUES ('Image'),
--jpeg,jpg,png
       ('Video'),
-- mp4,mpeg,webm*,ogg*
       ('Audio'),
--* wav, aiff, mp3, au, flac, m4a, ogg
       ('Text') -- txt,csv,tsv,json*,html*
;

